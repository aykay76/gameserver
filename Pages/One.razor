@page "/one"

@using Microsoft.AspNetCore.SignalR.Client
@using gameserver.Data
@using gameserver.Services
@inject NavigationManager NavigationManager

<h1>One Game</h1>

<button type="button" @onclick="@ResetGame">Reset</button>

@if (!joined)
{
    <p>Enter your name and join:</p>
    <input type="text" maxlength="32" @bind="@username" />
    <button type="button" @onclick="@JoinGame"><span class="oi" aria-hidden="true"></span>Join!</button>
}

@if (players == null)
{
    <p><em>Waiting for others to join...</em></p>
}
else
{
    <table class="table">
        <tbody>
            <tr>
            @foreach (var player in players)
            {
                    <td>@player.Name (@player.Score)</td>
            }
            </tr>
        </tbody>
    </table>
}

@if (joined && !started)
{
    <button type="button" @onclick="@StartGame">Start!</button>
}

@if (cards == null)
{
    <p><em>Waiting for cards...</em></p>
}
else
{
    @foreach (var card in cards)
    {
        <button class="gamecard @card.Colour.ToLower()" type="button" @onclick="() => PlayCard(card)" disabled="@notMyTurn">@card.Name</button>
    }
}

<div class="piles">
    <button class="gamecard" type="button" @onclick="PickupCard" disabled="@notMyTurn">+</button>

    @if (discard == null)
    {
        <button class="gamecard" type="button" disabled="true">&nbsp;</button>
    }
    else
    {
        <button class="gamecard @discard.Colour.ToLower()" type="button" disabled="true">@discard.Name</button>
    }
</div>

@if (choosingColour)
{
<div class="modal fade show" tabindex="-1" role="dialog" style="display: block; padding-right: 17px;">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Choose Colour</h5>
      </div>
      <div class="modal-body">
        <button class="gamecard red" type="button" @onclick='() => ChooseColour("Red")'></button>
        <button class="gamecard yellow" type="button" @onclick='() => ChooseColour("Yellow")'></button>
        <button class="gamecard green" type="button" @onclick='() => ChooseColour("Green")'></button>
        <button class="gamecard blue" type="button" @onclick='() => ChooseColour("Blue")'></button>
      </div>
    </div>
  </div>
</div>    
}

@code {
    private bool joined = false;
    private bool started = false;
    private bool notMyTurn = true;
    private string username;
    private HubConnection hubConnection;
    private List<Player> players;
    private List<Card> cards;
    private Card discard;
    private Player me;
    private Player activePlayer;
    private Card chosenCard;
    bool choosingColour = false;
    string chosenColour = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initialised");
        
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/onesignal"))
            .Build();

        hubConnection.On("GameStarted", () =>
        {
            Console.WriteLine("Game has started");
            started = true;
            StateHasChanged();
        });

        hubConnection.On<Player>("ActivePlayer", (player) =>
        {
            Console.WriteLine($"Active player is {player.Name}");

            if (me.Name == player.Name)
            {
                notMyTurn = false;
            }

            activePlayer = player;

            StateHasChanged();
        });

        hubConnection.On<Card>("HaveCard", (card) =>
        {
            Console.WriteLine($"Got a card {card.Name}, {card.Colour}");

            if (cards == null) cards = new List<Card>();
            cards.Add(card);
            StateHasChanged();
        });

        hubConnection.On<Card, string>("CardDiscarded", (card, colourOverride) =>
        {
            Console.WriteLine($"Card discarded: {card.Name}, {card.Colour}, {colourOverride}");
            
            discard = card;
            discard.Colour = colourOverride;
            StateHasChanged();
        });

        hubConnection.On<Player>("YouAre", (player) => 
        {
            Console.WriteLine($"I am {player.Name}");

            me = player;
        });

        hubConnection.On<List<Player>>("PlayerList", (allPlayers) =>
        {
            Console.WriteLine("Got list of players");

            players = new List<Player>();
            players.AddRange(allPlayers);

            StateHasChanged();
        });

        hubConnection.On<Player>("Winner", async (players) =>
        {
            int score = 0;

            // TODO: output congrats, sending score...

            foreach (var card in cards)
            {
                score += card.Value;
            }

            await hubConnection.SendAsync("Score", me, score);
        });

        hubConnection.On("ResetGame", () => 
        {
            started = false;
            discard = null;
            notMyTurn = true;
            username = null;
            cards = new List<Card>();
            discard = null;
            activePlayer = null;

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task JoinGame()
    {
        joined = true;
        await hubConnection.SendAsync("JoinGame", username);
        StateHasChanged();
    }

    private async Task StartGame()
    {
        await hubConnection.SendAsync("StartGame");
        StateHasChanged();
    }

    private async Task PickupCard()
    {
        notMyTurn = true;

        await hubConnection.SendAsync("PickupCard");

        StateHasChanged();
    }

    private async Task PlayCard(Card card)
    {
        // check card is valid to play
        bool valid = card.Valid(discard);

        // remove card from hand
        if (valid)
        {
            if (card.Colour == "Wild")
            {
                chosenCard = card;
                choosingColour = true;
                StateHasChanged();
            }
            else
            {
                notMyTurn = true;

                cards.Remove(card);

                await hubConnection.SendAsync("PlayCard", card, card.Colour, cards.Count == 0);

                StateHasChanged();
            }
        }
        else
        {
            // TODO: notify incorrect move
        }
    }

    private async Task ChooseColour(string colour)
    {
        choosingColour = false;

        notMyTurn = true;

        cards.Remove(chosenCard);

        await hubConnection.SendAsync("PlayCard", chosenCard, colour, cards.Count == 0);

        StateHasChanged();
    }

    private async Task ResetGame()
    {
        await hubConnection.SendAsync("ResetGame");
    }
}
