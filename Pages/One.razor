@page "/one"

@using Microsoft.AspNetCore.SignalR.Client
@using gameserver.Data
@using gameserver.Services
@inject NavigationManager NavigationManager

<h1>One Game</h1>

<p>Enter your name and join:</p>
<input type="text" maxlength="32" @bind="@username" />
<button type="button" @onclick="@JoinGame"><span class="oi" aria-hidden="true"></span>Join!</button>

@if (players == null)
{
    <p><em>Waiting for others to join...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in players)
            {
                <tr>
                    <td>@player.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (joined && !started)
{
    <button type="button" @onclick="@StartGame">Start!</button>
}

@if (cards == null)
{
    <p><em>Waiting for cards...</em></p>
}
else
{
    @foreach (var card in cards)
    {
        <button class="gamecard" type="button" @onclick="() => PlayCard(card)" disabled="@notMyTurn">@card.Colour @card.Name</button>
    }
}

<button class="gamecard" type="button" @onclick="PickupCard" disabled="@notMyTurn">Pick Up</button>

@if (discard == null)
{
    <p><em>Discard pile empty...</em></p>
}
else
{
    <h2>Discard</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Colour</th>
                <th>Name</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@discard.Colour</td>
                <td>@discard.Name</td>
                <td>@discard.Value</td>
            </tr>
        </tbody>
    </table>
}

@code {
    private bool joined = false;
    private bool started = false;
    private bool notMyTurn = true;
    private string username;
    private HubConnection hubConnection;
    private List<Player> players;
    private List<Card> cards;
    private Card discard;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/onesignal"))
            .Build();

        hubConnection.On("YourTurn", () =>
        {
            notMyTurn = false;
            StateHasChanged();
        });

        hubConnection.On<Card>("HaveCard", (card) =>
        {
            // TODO: handle the case where it's my go, I picked up and can play the card immediately

            if (cards == null) cards = new List<Card>();
            cards.Add(card);
            StateHasChanged();
        });

        hubConnection.On<Card>("CardDiscarded", (card) =>
        {
            discard = card;
            StateHasChanged();
        });

        hubConnection.On<List<Player>>("PlayerList", (allPlayers) =>
        {
            Console.WriteLine("Player joined");
            players = new List<Player>();
            players.AddRange(allPlayers);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task JoinGame()
    {
        joined = true;
        await hubConnection.SendAsync("JoinGame", username);
        StateHasChanged();
    }

    private async Task StartGame()
    {
        started = true;
        await hubConnection.SendAsync("StartGame");
        StateHasChanged();
    }

    private async Task PickupCard()
    {
        await hubConnection.SendAsync("PickupCard");
    }

    private async Task PlayCard(Card card)
    {
        // check card is valid to play
        bool valid = card.Valid(discard);

        // remove card from hand
        if (valid)
        {
            notMyTurn = true;

            cards.Remove(card);

            await hubConnection.SendAsync("PlayCard", card);

            StateHasChanged();
        }
        else
        {
            // TODO: notify incorrect move
        }
    }
}
